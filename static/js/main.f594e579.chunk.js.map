{"version":3,"sources":["components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","utils/Api.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/App.js","serviceWorker.js","index.js","images/logo.svg"],"names":["Header","props","className","src","logo","alt","CurrentUserContext","React","createContext","Card","card","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","owner","_id","cardDeleteButtonClassName","isLiked","likes","some","i","cardLikeButtonClassName","onClick","type","name","link","length","Main","newLocal","clickImages","onEditAvatar","aria-label","avatar","onEditProfile","about","onAddPlace","cards","map","key","Footer","ImagePopup","isOpen","onClose","image","api","baseUrl","headers","this","res","ok","json","Promise","reject","status","fetch","then","_checkPromise","item","method","body","JSON","stringify","cardId","authorization","PopupWithForm","onSubmit","title","children","buttonText","EditProfilePopup","useState","setName","description","setDescription","useEffect","e","preventDefault","onUpdateUser","value","onChange","target","placeholder","minLength","maxLength","required","id","EditAvatarPopup","avatarLink","useRef","current","onUpdateAvatar","ref","AddPlacePopup","setLink","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isCardSelected","setIsCardSelected","dataImage","setDataImage","setCards","setCurrentUser","closeAllPopups","all","getUserInfo","getInitialCards","user","catch","err","console","log","Provider","changeLikeCardStatus","newCard","newCards","c","error","removeCard","filter","patchProfileInfo","newUserInfo","newCardAdd","setUserAvatar","newAvatar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.f594e579.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../images/logo.svg';\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <img className=\"header__logo\" src={logo} alt=\"Места России\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nexport const CurrentUserContext = React.createContext();","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nfunction Card(props) {\r\n    const { card, onCardClick, onCardLike, onCardDelete } = props;\r\n\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n    // Определяем, являемся ли мы владельцем текущей карточки\r\n    const isOwn = props.card.owner._id === currentUser._id;\r\n\r\n    // Создаём переменную, которую после зададим в `className` для кнопки удаления\r\n    const cardDeleteButtonClassName = (\r\n        `${isOwn ? 'element__delete element__delete_active' : 'element__delete'}`\r\n    );\r\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\r\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\r\n\r\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\r\n    const cardLikeButtonClassName = (`${isLiked ? 'element__like element__like_active' : 'element__like '}`);\r\n    function handleClick() {\r\n        onCardClick(card);\r\n    }\r\n    function handleLike() {\r\n        onCardLike(card);\r\n    }\r\n    function handleDelete() {\r\n        onCardDelete(card)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"element\">\r\n            <button onClick={handleDelete} className={cardDeleteButtonClassName} type=\"button\"></button>\r\n            <img onClick={handleClick} className=\"element__img\" alt={card.name} src={card.link} />\r\n            <div className=\"element__cell\">\r\n                <p className=\"element__title\">{card.name}</p>\r\n                <div className=\"element__likes\">\r\n                    <button onClick={handleLike} className={cardLikeButtonClassName} type=\"submit\"></button>\r\n                    <p className=\"element__like_length\">{card.likes.length}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\nconst Main = (props) => {\r\n    const currentUser = React.useContext(CurrentUserContext)\r\n    const newLocal = props.clickImages;\r\n\r\n    return (\r\n        <main className=\"content\">\r\n            <section className=\"profile\">\r\n\r\n                <button className=\"profile__avatar_button\" type='button' onClick={props.onEditAvatar} aria-label=\"Редактировать аватар\">\r\n                    <img src={currentUser.avatar} className=\"profile__avatar\" alt=\"Аватар\" />\r\n                </button>\r\n\r\n                <div className=\"profile__info\">\r\n                    <div className=\"profile__info-name\">\r\n                        <h1 className=\"profile__info-author\">{currentUser.name}</h1>\r\n                        <button type=\"button\" className=\"profile__edit-button\" onClick={props.onEditProfile}></button>\r\n                    </div>\r\n                    <p className=\"profile__info-profession\">{currentUser.about}</p>\r\n                </div>\r\n                <button type=\"button\" className=\"profile__add-button\" onClick={props.onAddPlace}></button>\r\n            </section>\r\n            <section className=\"elements\">\r\n            {props.cards && props.cards.map((card) => (\r\n              <Card key={card._id} \r\n              card={card} \r\n              onCardClick={newLocal}\r\n              onCardLike={props.onCardLike} \r\n              onCardDelete={props.onCardDelete}/>\r\n            ))}\r\n\r\n            </section>\r\n            <section className=\"popups\">\r\n  \r\n            </section>\r\n\r\n        </main>\r\n        \r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nconst Footer = (props) => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <div className=\"footer__copyright\">&copy; 2020 Mesto Russia</div>\r\n        </footer>\r\n    )\r\n}\r\nexport default Footer","import React from 'react';\r\n\r\nfunction ImagePopup(props) {\r\n    \r\n    return (\r\n        <section className={`popup popup__type_img ${props.isOpen ? 'popup_opened' : ''}`} >\r\n        <div className=\"popup__container_img\">\r\n            <button onClick={props.onClose} className=\"popup__close popup__close_img\" type=\"button\"></button>\r\n            <img className=\"popup__photo\" src={props.image.link} alt={props.image.name} />\r\n            <p className=\"popup__caption\">{props.image.name}</p>\r\n        </div>\r\n    </section>\r\n    )\r\n}\r\nexport default ImagePopup;\r\n","class Api {\r\n    constructor({ baseUrl, headers = {} }) {\r\n        this.baseUrl = baseUrl;\r\n        this.headers = headers;\r\n    }\r\n    // Метод проверки промиса\r\n    _checkPromise(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`)\r\n    }\r\n\r\n    // Массив карточек\r\n    getInitialCards() {\r\n        return fetch(`${this.baseUrl}/cards`, {\r\n            headers: this.headers\r\n        })\r\n            .then(res => this._checkPromise(res))\r\n    }\r\n    // Добавление карточки\r\n    newCardAdd(item) {\r\n        return fetch(`${this.baseUrl}/cards`, {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify(item)\r\n        })\r\n            .then(res => this._checkPromise(res));\r\n    }\r\n\r\n\r\n    // Загрузка профиля с сервера\r\n    getUserInfo() {\r\n        return fetch(`${this.baseUrl}/users/me`, {\r\n            headers: this.headers\r\n        })\r\n            .then((res) => this._checkPromise(res))\r\n    }\r\n    // Редактирование профиля\r\n    patchProfileInfo(name, about) {\r\n        return fetch(`${this.baseUrl}/users/me`, {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                about: about\r\n            })\r\n        })\r\n            .then(res => this._checkPromise(res));\r\n    }\r\n    // Удаление карты\r\n    removeCard(cardId) {\r\n        return fetch(`${this.baseUrl}/cards/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: this.headers\r\n        })\r\n            .then(res => this._checkPromise(res));\r\n    }\r\n\r\n    // Установка и удаление лайка\r\n    changeLikeCardStatus(cardId, status) {\r\n        return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\r\n            method: `${(status) ? 'PUT' : 'DELETE'}`,\r\n            headers: this.headers\r\n        })\r\n            .then(res => this._checkPromise(res));\r\n    }\r\n    // Запрос на обновление аватарки\r\n    setUserAvatar(avatar) {\r\n        return fetch(`${this.baseUrl}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify(avatar)\r\n        })\r\n            .then(res => this._checkPromise(res));\r\n    }\r\n}\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-15',\r\n    headers: {\r\n        authorization: 'bfafbae2-07a3-48fe-808e-9f17604e2a09',\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\nexport default api","import React from 'react';\r\nfunction PopupWithForm(props) {\r\n    return (\r\n        <section className={`popup popup_type_${props.name} ${props.isOpen ? 'popup_opened' : ''}`} >\r\n\r\n            <form onSubmit={props.onSubmit} name={`popup__container_type_${props.name}`} className={`popup__container popup__container_type_${props.name}`}>\r\n                <button onClick={props.onClose} type=\"button\" className=\"popup__close popup__close_type_edit\"></button>\r\n                <h3 className=\"popup__title\">{props.title}</h3>\r\n                {props.children}\r\n                <button className={`popup__button popup__button_type_${props.name}`} type=\"submit\">{props.buttonText}</button>\r\n\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default PopupWithForm","import React from \"react\";\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\nfunction EditProfilePopup(props) {\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n    const [name, setName] = React.useState('');\r\n    const [description, setDescription] = React.useState('');\r\n    React.useEffect(() => {\r\n        setName(currentUser.name);\r\n        setDescription(currentUser.about)\r\n    }, [currentUser])\r\n    function handleChangeName(e) {\r\n        setName(e.target.value)\r\n    }\r\n    function handleChangeDescription(e) {\r\n        setDescription(e.target.value)\r\n    }\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        props.onUpdateUser({\r\n            name,\r\n            about: description,\r\n        });\r\n        \r\n    }\r\n    return (\r\n        <PopupWithForm onSubmit={handleSubmit} buttonText=\"Сохранить\" name='edit' title=\"Редактировать профиль\" isOpen={props.isOpen} onClose={props.onClose} >\r\n            <input value={name || ''} onChange={handleChangeName} type=\"text\" placeholder=\"Имя\" name=\"popup__text_type_author\" className=\"popup__text popup__text_type_author\" minLength=\"2\" maxLength=\"40\" required id=\"author-card\" />\r\n            <span id=\"author-card-error\" className=\"error\"></span>\r\n            <input value={description || '' } onChange={handleChangeDescription} type=\"text\" placeholder=\"Профессия\" name=\"popup__text_type_profession\" className=\"popup__text popup__text_type_profession\" minLength=\"2\" maxLength=\"200\" required id=\"profession-card\" />\r\n            <span id=\"profession-card-error\" className=\"error\"></span>\r\n        </PopupWithForm>\r\n    )\r\n}\r\nexport default EditProfilePopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nfunction EditAvatarPopup(props) {\r\n    const avatarLink = React.useRef('');\r\n\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const avatar = {\r\n           avatar: avatarLink.current.value\r\n        }\r\n        props.onUpdateAvatar(avatar)\r\n        \r\n    }\r\n\r\n    return (\r\n        <PopupWithForm buttonText=\"Сохранить\" title=\"Обновить аватар\" isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit} >\r\n            <input  ref={avatarLink} type=\"url\" placeholder=\"Ссылка на картинку\" name=\"avatar\" required className=\"popup__text popup__text_type_avatar\" id=\"url-avatar\" />\r\n            <span id=\"url-avatar-error\" className=\"error\"></span>\r\n        </PopupWithForm>\r\n    )\r\n}\r\nexport default EditAvatarPopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nfunction AddPlacePopup(props) {\r\n\r\n    const [link, setLink] = React.useState('');\r\n    const [name, setName] = React.useState('');\r\n\r\n    function handleChangeName(e) {\r\n        setName(e.target.value)\r\n    }\r\n\r\n    function handleChangeLink(e) {\r\n        setLink(e.target.value)\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        props.onAddPlace({\r\n            name: name,\r\n            link: link\r\n        })\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm buttonText=\"Сохранить\" name='add' title=\"Новое место\" isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit}>\r\n            <input value={name || ''} onChange={handleChangeName} type=\"text\" placeholder=\"Название\" name=\"name\" minLength=\"2\" required className=\"popup__text popup__text_type_place\" id=\"place-card\" />\r\n            <span id=\"place-card-error\" className=\"error\"></span>\r\n            <input value={link || ''} onChange={handleChangeLink} type=\"url\" placeholder=\"Ссылка на картинку\" name=\"link\" required className=\"popup__text popup__text_type_url\" id=\"url-card\" />\r\n            <span id=\"url-card-error\" className=\"error\"></span>\r\n        </PopupWithForm>\r\n    )\r\n}\r\nexport default AddPlacePopup;","import React from 'react';\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Footer from './Footer';\r\nimport ImagePopup from './ImagePopup';\r\nimport api from '../utils/Api';\r\nimport EditProfilePopup from './EditProfilePopup';\r\nimport EditAvatarPopup from './EditAvatarPopup';\r\nimport AddPlacePopup from './AddPlacePopup';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\n\r\n\r\nfunction App() {\r\n  // Переменные внутреннего состояния\r\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\r\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\r\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\r\n  const [isCardSelected, setIsCardSelected] = React.useState(false);\r\n  const [dataImage, setDataImage] = React.useState({});\r\n  const [cards, setCards] = React.useState([]);\r\n  const [currentUser, setCurrentUser] = React.useState({});\r\n  // Удаление карточки\r\n  function handleCardDelete(card) {\r\n    api.removeCard(card._id)\r\n      .then(() => {\r\n        const newCards = cards.filter((c) => c._id !== card._id);\r\n        setCards(newCards)\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  // Лайк\r\n  function handleCardLike(card) {\r\n    // Снова проверяем, есть ли уже лайк на этой карточке\r\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\r\n\r\n    // Отправляем запрос в API и получаем обновлённые данные карточки\r\n    api.changeLikeCardStatus(card._id, !isLiked)\r\n      .then((newCard) => {\r\n        // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\r\n        const newCards = cards.map((c) => c._id === card._id ? newCard : c);\r\n        // Обновляем стейт\r\n        setCards(newCards);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n\r\n  }\r\n\r\n\r\n  // Открытие попапов\r\n  function handleEditAvatarClick() {\r\n    setIsEditAvatarPopupOpen(true);\r\n  }\r\n  function handleEditProfileClick() {\r\n    setIsEditProfilePopupOpen(true);\r\n  }\r\n  function handleAddPlaceClick() {\r\n    setIsAddPlacePopupOpen(true);\r\n  }\r\n  function handleCardClick() {\r\n    setIsCardSelected(true);\r\n  }\r\n  // Закрытие попапов\r\n  function closeAllPopups() {\r\n    setIsEditAvatarPopupOpen(false);\r\n    setIsEditProfilePopupOpen(false);\r\n    setIsAddPlacePopupOpen(false);\r\n    setIsCardSelected(false);\r\n    setDataImage({})\r\n\r\n  }\r\n\r\n  // Попап изображения\r\n  const setImage = (card) => {\r\n    setDataImage(card);\r\n    handleCardClick();\r\n  }\r\n\r\n  // Изменение данных пользователя\r\n  function handleUpdateUser(user) {\r\n    api.patchProfileInfo(user.name, user.about)\r\n      .then((newUserInfo) => {\r\n        setCurrentUser(newUserInfo);\r\n        closeAllPopups();\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  // Изменение аватара пользователя\r\n  function handleUpdateAvatar(avatar) {\r\n    api.setUserAvatar(avatar)\r\n      .then((newAvatar) => {\r\n        setCurrentUser(newAvatar);\r\n        closeAllPopups();\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  // Добавление новой карточки\r\n  function handleAddPlaceSubmit(newCard) {\r\n    api.newCardAdd(newCard)\r\n      .then((res) => {\r\n        setCards([res, ...cards]);\r\n        closeAllPopups();\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  // Запрос начальных карточек, профиля\r\n  React.useEffect(() => {\r\n    Promise.all([api.getUserInfo(), api.getInitialCards()])\r\n\r\n      .then(([user, cards]) => {\r\n        setCurrentUser(user);\r\n        setCards(cards)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n  }, [])\r\n\r\n  return (\r\n\r\n    <div className=\"root\">\r\n      <CurrentUserContext.Provider value={currentUser}>\r\n        <Header />\r\n        <Main onEditProfile={handleEditProfileClick}\r\n          onAddPlace={handleAddPlaceClick}\r\n          onEditAvatar={handleEditAvatarClick}\r\n          clickImages={setImage}\r\n          cards={cards}\r\n          onCardLike={handleCardLike}\r\n          onCardDelete={handleCardDelete}\r\n        />\r\n        <Footer />\r\n        <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\r\n        <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlaceSubmit} />\r\n        <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\r\n        {/* <PopupWithForm name='delete' title=\"Вы уверенны?\" isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups}>\r\n        <button className=\"popup__button popup__button_type_delete\" type=\"submit\">Да</button>\r\n      </PopupWithForm> */}\r\n        <ImagePopup isOpen={isCardSelected} onClose={closeAllPopups} image={dataImage} />\r\n      </CurrentUserContext.Provider>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.855a8c98.svg\";"],"sourceRoot":""}